# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further

[gcode_macro USER_VARIABLES]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          300   # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            10    # how fast should the toolhead move when docking the probe for the final movement
variable_release_speed:         100    # how fast should the toolhead move to release the hold of the magnets after docking
variable_z_drop_speed:          25    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:           247
variable_z_endstop_y:           305

#dock location
variable_docklocation_x:        195    # X Dock position
variable_docklocation_y:        305   # Y Dock position
variable_docklocation_z:        15    # Z dock position
variable_dockarmslenght:        30    # Dock arms lenght, toolhead movement necessary to clear the dock arms


# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

[gcode_macro HOMING_VARIABLES]
default_parameter_reset: 0
gcode:
    {% set R  = params.RESET %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    {% endif %}

[gcode_macro PROBE_VARIABLES]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:

# Attach probe and lock it
[gcode_macro ATTACH_PROBE_LOCK]
gcode:
    ATTACH_PROBE
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }

# Attach probe and lock it
[gcode_macro DOCK_PROBE_UNLOCK]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    DOCK_PROBE

# Attach Probe Routine
[gcode_macro ATTACH_PROBE]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro USER_VARIABLES"].docklocation_y %}
    {% set Dz = printer["gcode_macro USER_VARIABLES"].docklocation_z %}
    {% set Da = printer["gcode_macro USER_VARIABLES"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro USER_VARIABLES"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro USER_VARIABLES"].travel_speed * 60 %}

    # Check and move up if necessary to be safe
    {% if (printer.toolhead.position.z < Hzh) %}
        G1 Z{Hzh} F2400
    {% endif %}
    M400
    SAVE_GCODE_STATE name=_attachProbe
    SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F2400
        {% endif %}

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F2400
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000
        #Go to Z safe distance
        G1 Z{Hzh} F2400

        CHECK_PROBE action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        CHECK_PROBE action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        CHECK_PROBE action=query

    {% endif %}

    # Revert to the original Z offset
    RESTORE_GCODE_STATE name=_attachProbe


# Dock Probe Routine
[gcode_macro DOCK_PROBE]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro USER_VARIABLES"].docklocation_y %}
    {% set Dz = printer["gcode_macro USER_VARIABLES"].docklocation_z %}
    {% set Da = printer["gcode_macro USER_VARIABLES"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro USER_VARIABLES"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro USER_VARIABLES"].travel_speed * 60 %}
    {% set Sd = printer["gcode_macro USER_VARIABLES"].dock_speed * 60 %}
    {% set Sr = printer["gcode_macro USER_VARIABLES"].release_speed * 60 %}
    {% set Sz = printer["gcode_macro USER_VARIABLES"].z_drop_speed * 60 %}

    M400
    SAVE_GCODE_STATE name=_dockProbe
    SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F{Sz}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int + 50} Y{Dy} F{Sr}
        #Go to Z safe distance
        G1 Z{Hzh} F{Sz}

        CHECK_PROBE action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        CHECK_PROBE action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        CHECK_PROBE action=query

    {% endif %}

    # Revert to the original Z offset  
    RESTORE_GCODE_STATE name=_dockProbe


[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set V = printer["gcode_macro USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("Quad Gantry Level") }
    {% endif %}

    CHECK_PROBE action=query
    ATTACH_PROBE

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    DOCK_PROBE


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set V = printer["gcode_macro USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    CHECK_PROBE action=query
    ATTACH_PROBE

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    DOCK_PROBE


[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    {% set Hzh = printer["gcode_macro USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro USER_VARIABLES"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=original_nozzle_location
    
    CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1 MOVE_SPEED={St}
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1 MOVE_SPEED={St}


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    {% set Hzh = printer["gcode_macro USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro USER_VARIABLES"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=original_nozzle_location

    CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1 MOVE_SPEED={St}
    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1 MOVE_SPEED={St}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CHECK_PROBE]
variable_probe_state: 0
default_parameter_action:
gcode:
    QUERY_PROBE
    SET_PROBE_STATE action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SET_PROBE_STATE]
default_parameter_action:
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro USER_VARIABLES"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
